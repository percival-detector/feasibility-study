# Database for configurator control using asyn driver and standard asyn device support
# gnx91527
# August 6, 2013

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address

# This associates the template with an edm screen
# % gui, $(PORT), edmtab, ADPercivalDetector.edl, P=$(P),R=$(R)

###################################################################
#  This record controls the low level non-EPICS debug level       #
###################################################################

record(longout, "$(P)$(R)DebugLevel")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_DEBUG_LEVEL")
   field(VAL,  "0")
}

record(longin, "$(P)$(R)DebugLevel_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_DEBUG_LEVEL")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record sets the watchdog timeout                          #
###################################################################

record(longout, "$(P)$(R)Watchdog")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_WATCHDOG_TIMEOUT")
   field(VAL,  "2000")
}

record(longin, "$(P)$(R)Watchdog_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_WATCHDOG_TIMEOUT")
   field(SCAN, "I/O Intr")
}

###################################################################
#  Single channel mode or multi channel mode                      #
###################################################################

record(mbbo, "$(P)$(R)ChannelMode")
{
   field(PINI, "NO")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_CHANNEL_MODE")
   field(ZRST, "Spatial")
   field(ZRVL, "0")
   field(ONST, "Temporal")
   field(ONVL, "1")
   field(VAL,  "0")
}

record(mbbi, "$(P)$(R)ChannelMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_CHANNEL_MODE")
   field(ZRST, "Spatial")
   field(ZRVL, "0")
   field(ONST, "Temporal")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  Should the incoming frames be de-scrambled or left as raw      #
###################################################################

record(mbbo, "$(P)$(R)Descramble")
{
   field(PINI, "NO")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_DESCRAMBLE")
   field(ZRST, "Raw")
   field(ZRVL, "0")
   field(ONST, "Descramble")
   field(ONVL, "1")
   field(TWST, "Reorder Only")
   field(TWVL, "2")
   field(VAL,  "0")
}

record(mbbi, "$(P)$(R)Descramble_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_DESCRAMBLE")
   field(ZRST, "Raw")
   field(ZRVL, "0")
   field(ONST, "Descramble")
   field(ONVL, "1")
   field(TWST, "Reorder Only")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records define the configuration file path and filename  #
###################################################################

record(waveform, "$(P)$(R)PercFilePath_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_FILE_PATH")
   field(FTVL, "CHAR")
   field(NELM, "256") 
   field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)PercFilePath")
{
   field(DTYP, "asynOctetWrite")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_FILE_PATH")
   field(FTVL, "CHAR")
   field(NELM, "256") 
}

record(waveform, "$(P)$(R)PercFileName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_FILE_NAME")
   field(FTVL, "CHAR")
   field(NELM, "256") 
   field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)PercFileName")
{
   field(DTYP, "asynOctetWrite")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_FILE_NAME")
   field(FTVL, "CHAR")
   field(NELM, "256") 
}

record(longin, "$(P)$(R)PercFilePathExists_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_FILE_PATH_EXISTS")
   field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)PercFullFileName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_FULL_FILE_NAME")
   field(FTVL, "CHAR")
   field(NELM, "256") 
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide configuration file read status           #
###################################################################

record(stringin, "$(P)$(R)PercFileReadMessage_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_READ_MESSAGE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)PercFileReadStatus_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_READ_STATUS")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)PercFileErrorStatus_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_FILE_ERROR_STATUS")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record initiates the config file read                     #
###################################################################

record(longout, "$(P)$(R)PercConfigFileRead")
{
   field(PINI, "NO")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_FILE_READ")
   field(VAL,  "0")
}

###################################################################
#  Overrides for records that are not required for Percival       #
###################################################################

record(ao, "$(P)$(R)AcquireTime") {
  field(DISA, "1")
}

record(ao, "$(P)$(R)AcquirePeriod") {
  field(DISA, "1")
}

record(ao, "$(P)$(R)Gain") {
  field(DISA, "1")
}

record(longout, "$(P)$(R)BinX") {
  field(DISA, "1")
}

record(longout, "$(P)$(R)BinY") {
  field(DISA, "1")
}

record(longout, "$(P)$(R)MinX") {
  field(DISA, "1")
}

record(longout, "$(P)$(R)MinY") {
  field(DISA, "1")
}

record(mbbo, "$(P)$(R)DataType")
{
   field(ZRST, "UInt8")
   field(ZRVL, "0")
   field(ONST, "UInt16")
   field(ONVL, "1")
   field(TWST, "UInt32")
   field(TWVL, "2")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

record(mbbi, "$(P)$(R)DataType_RBV")
{
   field(ZRST, "UInt8")
   field(ZRVL, "0")
   field(ONST, "UInt16")
   field(ONVL, "1")
   field(TWST, "UInt32")
   field(TWVL, "2")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records setup the socket                                 #
###################################################################

record(stringout, "$(P)$(R)PercAddr")
{
   field(PINI, "NO")
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_ADDR")
   field(VAL,  "")
}

record(stringin, "$(P)$(R)PercAddr_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_ADDR")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)PercPort")
{
   field(PINI, "NO")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_PORT")
   field(VAL,  "0")
}

record(longin, "$(P)$(R)PercPort_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_PORT")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)PercPacketBytes")
{
   field(PINI, "NO")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_PACKET_BYTES")
   field(VAL,  "0")
}

record(longin, "$(P)$(R)PercPacketBytes_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_PACKET_BYTES")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)PercSubFrame")
{
   field(PINI, "NO")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_SUB_FRAME")
   field(VAL,  "0")
}

record(longin, "$(P)$(R)PercSubFrame_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_SUB_FRAME")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record shows if the socket is receiving, and the status   #
###################################################################

record(longin, "$(P)$(R)PercReceive_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_RECEIVE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)PercError_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_ERROR")
   field(SCAN, "I/O Intr")
}

record(stringin, "$(P)$(R)PercStatus_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_STATUS")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  Error statistics                                               #
###################################################################

record(longin, "$(P)$(R)PercErrorDupPkt_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_ERR_DUP_PKT")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)PercErrorMisPkt_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_ERR_MIS_PKT")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)PercErrorLtePkt_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_ERR_LTE_PKT")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)PercErrorIncPkt_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_ERR_INC_PKT")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)PercErrorDupRPkt_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_ERR_DUP_R_PKT")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)PercErrorMisRPkt_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_ERR_MIS_R_PKT")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)PercErrorLteRPkt_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_ERR_LTE_R_PKT")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)PercErrorIncRPkt_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_ERR_INC_R_PKT")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)PercProcessTime_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PERC_PROCESS_TIME")
   field(SCAN, "I/O Intr")
}


###################################################################
#  Substitutions for each of the channels available               #
###################################################################

substitute "CHAN=1"
include "ADPercivalDriverChannel.template"
substitute "CHAN=2"
include "ADPercivalDriverChannel.template"
substitute "CHAN=3"
include "ADPercivalDriverChannel.template"
substitute "CHAN=4"
include "ADPercivalDriverChannel.template"
substitute "CHAN=5"
include "ADPercivalDriverChannel.template"
substitute "CHAN=6"
include "ADPercivalDriverChannel.template"
substitute "CHAN=7"
include "ADPercivalDriverChannel.template"
substitute "CHAN=8"
include "ADPercivalDriverChannel.template"
